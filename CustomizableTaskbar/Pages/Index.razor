    @page "/"

@inject IJSRuntime JSRuntime
@using Syncfusion.Blazor.Popups
@using Syncfusion.Blazor.ProgressBar
@using Syncfusion.Blazor.DropDowns
@using Syncfusion.Blazor.TreeGrid
<link href="css/gantttaskbar.css" rel="stylesheet" />


<SfGantt DataSource="@TaskCollection" ProjectStartDate="new DateTime(2022,4,1)" ID="GanttChart" Width="1200px" Height="450px" @ref="Gantt" HighlightWeekends="true"  TreeColumnIndex=1 RowHeight="40" GridLines="Syncfusion.Blazor.Gantt.GridLine.None">
    <GanttTaskFields Id="TaskId" Name="TaskName" StartDate="StartDate" EndDate="EndDate" Duration="Duration" ParentID="ParentId" Dependency="Predecessor" ExpandState="IsExpanded"></GanttTaskFields>
    <GanttColumns>
        <GanttColumn Field="TaskId"></GanttColumn>
        <GanttColumn Field="TaskName" Width=300></GanttColumn>
        <GanttColumn Field="StartDate"></GanttColumn>
        <GanttColumn Field="Duration"></GanttColumn>
        <GanttColumn Field="Predecessor" HeaderText="Predecessor"></GanttColumn>
        <GanttColumn Field="Done" HeaderText="Done"></GanttColumn>
        <GanttColumn Field="IsMilestone"></GanttColumn>
    </GanttColumns>
        <GanttTimelineSettings TimelineUnitSize=100>
        <GanttTopTierSettings Unit="TimelineViewMode.Month" Format="MMM"></GanttTopTierSettings>
        <GanttBottomTierSettings Unit="TimelineViewMode.Week">
                <FormatterTemplate>
                @{
                    @if (context.Tier == "bottom")
                    {
                        <div> @this.Formatter((context.Date)) </div>
                    }
                }
                </FormatterTemplate>
        </GanttBottomTierSettings>
    </GanttTimelineSettings>
    <GanttEditSettings AllowEditing="true" AllowAdding="true" AllowDeleting="true" AllowTaskbarEditing="true"></GanttEditSettings>
    <GanttTemplates TValue="TaskData">
        <ParentTaskbarTemplate>
            <div class="e-gantt-parent-taskbar e-custom-parent" style="height:22px;border-radius:5px;text-overflow:ellipsis;">
                <span class="e-task-label" style="color:black;top:18px;font-size:9px;overflow: hidden;white-space: nowrap;">@totalHours((context as TaskData).TaskId)</span>
            </div>
        </ParentTaskbarTemplate>
        <TaskbarTemplate>
            @if (((context as TaskData).IsMilestone) == false)
            {
                <SfTooltip Target=".e-gantt-child-taskbar" CssClass="customtooltip" CloseDelay="1000" ShowTipPointer=false Position="Position.TopRight" OffsetX=-110 OffsetY=10 WindowCollision=true OpensOn="Hover">
                    <TooltipTemplates>
                        <Content>
                            <SfButton ID=".e-gantt-child-taskbar" IconCss="e-icons e-open-icon" CssClass="e-round" @onclick="ButtonClick1"></SfButton>
                            <SfButton ID=".e-gantt-child-taskbar" IconCss="e-icons e-refresh-icon" CssClass="e-round" @onclick="ButtonClick2"></SfButton>
                            <SfButton ID=".e-gantt-child-taskbar" IconCss="e-icons e-clear-icon" CssClass="e-round" @onclick="ButtonClick3"></SfButton>
                        </Content>
                    </TooltipTemplates>
                    <div class="e-gantt-child-taskbar e-custom-moments" style="height:34px;border-radius:5px;">
                        <div>
                            <p>There are 12 more hours changed than scheduled</p>
                            <div style="position:absolute;top:13px">
                                <SfProgressBar Value="28" Height="10" Minimum="0" Maximum="28" TrackThickness="10" ProgressThickness="6" ProgressColor="#FFA500" CornerRadius="CornerType.Round"></SfProgressBar>
                             </div>       
                        </div>
                    </div>
            </SfTooltip>            
            <span class="e-task-label" style="color:black;top:18px;font-size:12px;overflow: hidden;white-space: nowrap;">@((context as TaskData).TaskName)</span>
            }
            else
            {
                <div class="e-gantt-child-taskbar milestone"></div>
            }

        </TaskbarTemplate>
    </GanttTemplates>
    <GanttEvents Created="created" BeforeTooltipRender="BeforeTooltipRender" TValue="TaskData"></GanttEvents>
    <GanttEventMarkers>
        <GanttEventMarker Day="Event1" Label="Today"
                          CssClass="e-custom-event-marker"></GanttEventMarker>
    </GanttEventMarkers>
    <GanttHolidays>
        <GanttHoliday From="@Holiday1" To="@Holiday2" Label="Public holidays"
                      CssClass="e-custom-holiday"></GanttHoliday>
    </GanttHolidays>
    <GanttSplitterSettings Position="280px"></GanttSplitterSettings>
</SfGantt>


@code{
    public SfGantt<TaskData> Gantt;
    public List<TaskData> TaskCollection { get; set; }
    public DateTime Event1 = System.DateTime.Now;
    public DateTime Holiday1 = new DateTime(2022, 04, 08);
    public DateTime Holiday2 = new DateTime(2022, 04, 12);
    public Dictionary<string, List<TaskData>> ChildRecords = new Dictionary<string, List<TaskData>>();
    private int totalHours(int id)
    {
        var tHours = 0;
        foreach (var record in ChildRecords[id.ToString()])
        {
            tHours += Convert.ToInt32(record.Duration);
        }
        return tHours;
    }

    protected override void OnInitialized()
    {
        this.TaskCollection = GetTaskCollection();
        foreach (TaskData record in this.TaskCollection)
        {
            if(record.ParentId == null){ continue; }
            var key = record.ParentId.ToString();
            if (!ChildRecords.ContainsKey(key))
            {
                ChildRecords[key] = new List<TaskData>();
            }
            ChildRecords[key].Add(record);
        }
    }
   

    
    private async Task ButtonClick1()
    {
        await JSRuntime.InvokeAsync<object>("ButtonClick", "Button1clicked");
    }
    private async Task ButtonClick2()
    {
        await JSRuntime.InvokeAsync<object>("ButtonClick", "Button2clicked");
    }
    private async Task ButtonClick3()
    {
        await JSRuntime.InvokeAsync<object>("ButtonClick", "Button3clicked");
    }
    private async Task CustomDivClicked()
    {
        await JSRuntime.InvokeAsync<object>("ButtonClick", "Clicked X-ray mode");
    }
 
    public void QueryChartRowInfo(Syncfusion.Blazor.Gantt.QueryChartRowInfoEventArgs<TaskData> args)
    {
        String[] s1 = new String[1] { "intro" };
        args.Row.AddClass(s1);
    }
    public void BeforeTooltipRender(BeforeTooltipRenderEventArgs<TaskData> args)
    {
        args.Cancel = true;
    }


    public async Task created()
    {
        //await JSRuntime.InvokeAsync<string>("GetSplitPanePosition", 2, Gantt.ID, tooltipX);
        await JSRuntime.InvokeAsync<string>("StyleEventMarker", Gantt.EventMarkers, Gantt.ProjectStartDate, Gantt.TimelineSettings.TimelineUnitSize, Gantt.TimelineSettings.BottomTier.Unit.ToString());
    }

    
    public string Formatter(DateTime? date)
    {
        DateTime dateTime = (DateTime)(date);
        string bottomString =  dateTime.Day + "-" + ((dateTime.AddDays(6)).Day);
        return bottomString;
    }
    
    public class TaskData
    {
        public int TaskId { get; set; }
        public string TaskName { get; set; }
        public DateTime StartDate { get; set; }
        public DateTime EndDate { get; set; }
        public string Duration { get; set; }
        public int Progress { get; set; }
        public string Predecessor { get; set; }
        public int? ParentId { get; set; }
        public bool IsExpanded { get; set; }
        public string Done { get; set; }
        public bool IsMilestone { get; set; }
    }

    public static List<TaskData> GetTaskCollection()
    {
        List<TaskData> Tasks = new List<TaskData>() {

    new TaskData() {
        TaskId = 1,
        TaskName = "Project initiation",
        StartDate = new DateTime(2022, 04, 02),
        EndDate = new DateTime(2022, 04, 21),
        IsExpanded = false,
        Done = "Yes"
    },
    new TaskData() {
        TaskId = 2,
        TaskName = "Identify Site location",
        StartDate = new DateTime(2022, 04, 02),
        Duration = "10",
        Progress = 30,
        ParentId = 1,
        IsExpanded = true,
        Done = "No"
    },
    new TaskData() {
        TaskId = 3,
        TaskName = "Perform soil test",
        StartDate = new DateTime(2022, 04, 02),
        Duration = "4",
        Progress = 40,
        ParentId = 1,
        Predecessor = "2",
        IsExpanded = true,
        Done = "No",
        IsMilestone = true
    },
    new TaskData() {
        TaskId = 4,
        TaskName = "Soil test approval",
        StartDate = new DateTime(2022, 04, 02),
        Duration = "3",
        Progress = 30,
        ParentId = 1,
        Predecessor = "3",
        IsExpanded = true,
        Done = "No"
    },
    new TaskData() {
        TaskId = 5,
        TaskName = "Project estimation",
        StartDate = new DateTime(2022, 04, 02),
        EndDate = new DateTime(2022, 04, 21),
        IsExpanded = true,
        Done = "Yes"
    },
    new TaskData() {
        TaskId = 6,
        TaskName = "Develop floor plan for estimation",
        StartDate = new DateTime(2022, 04, 04),
        Duration = "3",
        Progress = 30,
        ParentId = 5,
        IsExpanded = true,
        Done = "No"
    },
    new TaskData() {
        TaskId = 7,
        TaskName = "List materials",
        StartDate = new DateTime(2022, 04, 04),
        Duration = "13",
        Progress = 40,
        ParentId = 5,
        IsExpanded = true,
        //6+2 - predecessor task + 2 days lags
        Done = "No", Predecessor = "6+2",
        IsMilestone = true
    },
    new TaskData() {
        TaskId = 8,
        TaskName = "Estimation approval",
        StartDate = new DateTime(2022, 04, 04),
        Duration = "25",
        Progress = 30,
        ParentId = 5,
        IsExpanded = true, Predecessor="7-2",
        Done = "No"
    },
     new TaskData() {
        TaskId = 9,
        TaskName = "Demand Analysis",
        StartDate = new DateTime(2022, 04, 02),
        EndDate = new DateTime(2022, 04, 21),
        IsExpanded = true,
        Done = "Yes"
    },
    new TaskData() {
        TaskId = 10,
        TaskName = "Customer Strength",
        StartDate = new DateTime(2022, 04, 04),
        Duration = "3",
        Progress = 30,
        ParentId = 9,
        IsExpanded = false,
        Done = "Yes"
    },
    new TaskData() {
        TaskId = 11,
        TaskName = "Competitor analysis",
        StartDate = new DateTime(2022, 04, 04),
        Duration = "13",
        Progress = 40,
        ParentId = 10,
        IsExpanded = true,
        Done = "Yes"
    },
    new TaskData() {
        TaskId = 12,
        TaskName = "Product Strength Analysis",
        StartDate = new DateTime(2022, 04, 04),
        Duration = "25",
        Progress = 30,
        ParentId = 11,
        IsExpanded = true,
        Done = "No"
    },
    new TaskData() {
        TaskId = 13,
        TaskName = "Project estimation",
        StartDate = new DateTime(2022, 04, 02),
        EndDate = new DateTime(2022, 04, 21),
        IsExpanded = true,
        Done = "Yes"
    },
    new TaskData() {
        TaskId = 14,
        TaskName = "Develop floor plan for estimation",
        StartDate = new DateTime(2022, 04, 22),
        Duration = "25",
        Progress = 30,
        ParentId = 13,
        IsExpanded = true,
        Done = "Yes"
    },
    new TaskData() {
        TaskId = 15,
        TaskName = "List materials",
        StartDate = new DateTime(2022, 04, 20),
        Duration = "12",
        Progress = 40,
        ParentId = 14,
        IsExpanded = true,
        Done = "Yes"
    },
    new TaskData() {
        TaskId = 16,
        TaskName = "Estimation approval",
        StartDate = new DateTime(2022, 04, 19),
        Duration = "6",
        Progress = 30,
        ParentId = 15,
        IsExpanded = true,
        Done = "Yes"
    },
    new TaskData() {
        TaskId = 17,
        TaskName = "Identifying raw mayerials",
        StartDate = new DateTime(2022, 04, 17),
        Duration = "6",
        ParentId=16,
        IsExpanded = true,
        Done = "Yes"
    },
    new TaskData() {
        TaskId = 18,
        TaskName = "Define cost plan",
        StartDate = new DateTime(2022, 04, 15),
        Progress = 30,
        ParentId=17,
        IsExpanded = true,
        Done = "Yes"
    },
    new TaskData() {
        TaskId = 19,
        TaskName = "Manufacturing cost",
        StartDate = new DateTime(2022, 04, 13),
        Duration = "7",
        Progress = 40,
        ParentId = 18,
        IsExpanded = true,
        Done = "Yes"
    },
    new TaskData() {
        TaskId = 20,
        TaskName = "Selling cost",
        StartDate = new DateTime(2022, 04, 12),
        Duration = "6",
        Progress = 30,
        ParentId = 19,
        IsExpanded = true,
        Done = "Yes"
    },
    new TaskData() {
        TaskId = 21,
        TaskName = "Developement of final design",
        StartDate = new DateTime(2022, 04, 09),
        Duration = "5",
        ParentId=20,
        IsExpanded = true,
        Done = "Yes"
    },
    new TaskData() {
        TaskId = 22,
        TaskName = "Develope dimensions and design",
        StartDate = new DateTime(2022, 04, 08),
        Duration = "15",
        Progress = 30,
        ParentId=21,
        IsExpanded = true,
        Done = "Yes"
    },
    new TaskData() {
        TaskId = 23,
        TaskName = "Develope designs to meet industry",
        StartDate = new DateTime(2022, 04, 05),
        Duration = "15",
        Progress = 40,
        ParentId = 22,
        IsExpanded = true,
        Done = "Yes"
    },
    new TaskData() {
        TaskId = 24,
        TaskName = "Include all the deatails",
        StartDate = new DateTime(2022, 04, 02),
        Duration = "25",
        Progress = 30,
        ParentId = 23,
        IsExpanded = true,
        Done = "No"
    },
};
        return Tasks;
    }
}